{
  "pr": {
    "number": "7",
    "title": "feat: Zero-friction setup with demo mode and smart auth detection",
    "state": "OPEN"
  },
  "comments": [
    {
      "id": 2153238097,
      "author": "coderabbitai[bot]",
      "body": "_‚ö†Ô∏è Potential issue_\n\n**YAML-lint is failing due to trailing whitespace**  \nLines 17, 27 and 89 contain stray spaces which break some strict YAML parsers and CI linters.\n\n```diff\n-      Thanks for the feedback! We intentionally use console.log in our Lambda functions‚ê†\n+      Thanks for the feedback! We intentionally use console.log in our Lambda functions\n‚Ä¶\n-      Webhook payloads from external services can change without notice, ‚ê†\n+      Webhook payloads from external services can change without notice,\n‚Ä¶\n-  \n+\n```\n\n\n\nAlso applies to: 26-28, 88-90\n\n<details>\n<summary>üß∞ Tools</summary>\n\n<details>\n<summary>ü™õ YAMLlint (1.37.1)</summary>\n\n[error] 17-17: trailing spaces\n\n(trailing-spaces)\n\n</details>\n\n</details>\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn templates/patterns.yml around lines 16 to 18 and also lines 26 to 28 and 88\nto 90, there are trailing whitespaces at the end of some lines causing YAML\nlinting errors. Remove all trailing spaces from these lines to ensure the YAML\nfile passes strict parsers and CI linters without issues.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "path": "templates/patterns.yml",
      "line": 18,
      "created_at": "2025-06-17T21:57:26Z",
      "analysis": {
        "action": "REJECT",
        "reason": "Console logging is valid for CloudWatch in Lambda functions",
        "explanation": "This is a valid pattern in our codebase. Console logging is valid for CloudWatch in Lambda functions",
        "source": "rules"
      },
      "thread": "2153238097"
    },
    {
      "id": 2153238099,
      "author": "coderabbitai[bot]",
      "body": "_üõ†Ô∏è Refactor suggestion_\n\n**Demo data violates the newly-added single-quote ESLint rule**  \nThe entire file uses double quotes, which will now fail `eslint --max-warnings 0`.\n\nQuickest fix: disable the quote rule for this file because it is static demo content.\n\n```diff\n+/* eslint quotes: 0 */\n // Demo data for pr-vibe showcase - no authentication required\n```\n\nIf you‚Äôd rather keep the rule enforced everywhere, convert all string literals to single quotes instead.\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n/* eslint quotes: 0 */\n// Demo data for pr-vibe showcase - no authentication required\n\nexport const demoPRData = {\n  number: 42,\n  title: \"Add user authentication system\",\n  repository: \"awesome-app/backend\",\n  url: \"https://github.com/awesome-app/backend/pull/42\",\n  author: \"dev-user\",\n  created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n  comments: [\n    {\n      id: 1,\n      user: { login: \"coderabbit[bot]\" },\n      body: \"üö® **Security Issue**: Hardcoded API key detected in `config.js` line 42. This should be moved to environment variables.\",\n      path: \"src/config.js\",\n      line: 42,\n      created_at: new Date(Date.now() - 90 * 60 * 1000).toISOString()\n    },\n    {\n      id: 2,\n      user: { login: \"coderabbit[bot]\" },\n      body: \"‚ö†Ô∏è **Code Quality**: Remove `console.log` statements before merging to production.\",\n      path: \"src/handlers/auth.js\",\n      line: 156,\n      created_at: new Date(Date.now() - 85 * 60 * 1000).toISOString()\n    },\n    {\n      id: 3,\n      user: { login: \"deepsource[bot]\" },\n      body: \"Found usage of `any` type. Consider using more specific types for better type safety.\",\n      path: \"src/webhooks/stripe.ts\",\n      line: 23,\n      created_at: new Date(Date.now() - 80 * 60 * 1000).toISOString()\n    },\n    {\n      id: 4,\n      user: { login: \"coderabbit[bot]\" },\n      body: \"üìù **TODO Comment**: Found TODO comment that should be tracked in your issue tracker.\",\n      path: \"src/utils/validation.js\",\n      line: 89,\n      created_at: new Date(Date.now() - 75 * 60 * 1000).toISOString()\n    },\n    {\n      id: 5,\n      user: { login: \"sonarcloud[bot]\" },\n      body: \"Code smell: Function 'processPayment' has a Cognitive Complexity of 21 (exceeds 15 allowed).\",\n      path: \"src/payments/processor.js\",\n      line: 145,\n      created_at: new Date(Date.now() - 70 * 60 * 1000).toISOString()\n    }\n  ]\n};\n\nexport const demoPatterns = {\n  version: \"1.0\",\n  project: \"awesome-app\",\n  valid_patterns: [\n    {\n      id: \"console-lambda\",\n      pattern: \"console.log\",\n      condition: { files: [\"**/lambda/**\", \"**/handlers/**\"] },\n      reason: \"CloudWatch logging in Lambda functions\",\n      auto_reply: \"This console.log is intentional - we use CloudWatch for Lambda monitoring\",\n      confidence: 0.95\n    },\n    {\n      id: \"any-webhooks\",\n      pattern: \"any.*type\",\n      condition: { files: [\"**/webhooks/**\"] },\n      reason: \"Webhook payloads have dynamic schemas\",\n      auto_reply: \"Webhook payloads from external services don't have stable types\",\n      confidence: 0.88\n    }\n  ],\n  auto_fixes: [\n    {\n      trigger: \"hardcoded.+(api|key|secret|token)\",\n      fix_template: \"const {{CONST_NAME}} = process.env.{{ENV_NAME}};\",\n      message: \"Moving sensitive data to environment variables\"\n    }\n  ]\n};\n\nexport const demoBotResponses = {\n  1: {\n    decision: \"AUTO_FIX\",\n    response: \"Fixed by moving to environment variable\",\n    fix: \"const API_KEY = process.env.API_KEY;\"\n  },\n  2: {\n    decision: \"REJECT\",\n    response: \"This console.log is intentional - we use CloudWatch for Lambda monitoring\",\n    pattern_learned: true\n  },\n  3: {\n    decision: \"REJECT\", \n    response: \"Webhook payloads from Stripe don't have stable types - using 'any' is appropriate here\",\n    pattern_learned: true\n  },\n  4: {\n    decision: \"DEFER\",\n    response: \"TODO is already tracked in Jira ticket PROJ-1234\"\n  },\n  5: {\n    decision: \"ESCALATE\",\n    response: \"Refactoring needed - adding to technical debt backlog\"\n  }\n};\n\nexport function getDemoSummary() {\n  return {\n    total_comments: 5,\n    auto_fixed: 1,\n    rejected_with_explanation: 2,\n    deferred: 1,\n    escalated: 1,\n    time_saved_minutes: 18,\n    patterns_learned: 2\n  };\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>üß∞ Tools</summary>\n\n<details>\n<summary>ü™õ ESLint</summary>\n\n[error] 5-5: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 6-6: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 7-7: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 8-8: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 13-13: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 14-14: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 15-15: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 21-21: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 22-22: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 23-23: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 29-29: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 30-30: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 31-31: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 37-37: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 38-38: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 39-39: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 45-45: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 46-46: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 47-47: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 55-55: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 56-56: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 59-59: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 60-60: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 61-61: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 61-61: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 62-62: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 63-63: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 67-67: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 68-68: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 69-69: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 70-70: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 71-71: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 77-77: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 78-78: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 79-79: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 86-86: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 87-87: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 88-88: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 91-91: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 92-92: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 96-96: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 97-97: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 101-101: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 102-102: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 105-105: Strings must use singlequote.\n\n(quotes)\n\n---\n\n[error] 106-106: Strings must use singlequote.\n\n(quotes)\n\n</details>\n\n</details>\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn lib/demo-data.js lines 1 to 120, the file uses double quotes for all string\nliterals, which violates the newly-added ESLint single-quote rule. To fix this,\neither add an ESLint disable comment at the top of the file to turn off the\nquote rule for this static demo content, or convert all double-quoted strings to\nsingle-quoted strings consistently throughout the file.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "path": "lib/demo-data.js",
      "line": 120,
      "created_at": "2025-06-17T21:57:26Z",
      "analysis": {
        "confidence": "1.0",
        "source": "repo"
      },
      "thread": "2153238099"
    },
    {
      "id": 2153238106,
      "author": "coderabbitai[bot]",
      "body": "_‚ö†Ô∏è Potential issue_\n\n**Remove eager import ‚Äì it defeats the mocks and breaks every test**\n\nImporting `detectGitHubToken`/`isAuthRequired` before `jest.unstable_mockModule` means the real module loads with the *real* `child_process` & `fs`.  Later `await import()` just returns the cached copy, so your mocks never run ‚áí all ‚Äúreturns null‚Äù failures in CI.\n\n```diff\n-import { detectGitHubToken, isAuthRequired } from '../lib/auth.js';\n+// Do NOT import auth here.  Import it *after* mocks are registered inside each test.\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nimport { describe, test, expect, jest, beforeEach } from '@jest/globals';\n// Do NOT import auth here.  Import it *after* mocks are registered inside each test.\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn test/auth.test.js at the top of the file (lines 1-3), the functions\ndetectGitHubToken and isAuthRequired are imported eagerly, which causes the real\nmodule to load before mocks are applied, breaking tests. To fix this, remove the\ndirect import of these functions at the top and instead dynamically import them\nafter setting up jest.unstable_mockModule, ensuring the mocks are applied before\nthe module loads.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n‚úÖ Addressed in commit 7d86ab6",
      "path": "test/auth.test.js",
      "line": null,
      "created_at": "2025-06-17T21:57:26Z",
      "analysis": {
        "action": "AUTO_FIX",
        "severity": "HIGH",
        "reason": "Security issue that should be fixed",
        "suggestedFix": "// TODO: Implement fix based on specific issue",
        "source": "rules"
      },
      "thread": "2153238106"
    },
    {
      "id": 2153238110,
      "author": "coderabbitai[bot]",
      "body": "_‚ö†Ô∏è Potential issue_\n\n**Tests are timing-out ‚Äì stub `sleep` or bump Jest timeout**\n\n`runDemo()` deliberately sleeps ‚âà7 s.  \nCalling it many times pushes the suite beyond Jest‚Äôs 5 s default, producing the cascade of time-out failures shown in CI.\n\nQuickest fix:\n\n```diff\n+// ‚Üë top of file\n+jest.setTimeout(20000); // demo sleeps ‚Üí give it room\n```\n\nBetter: patch `sleep` in demo during tests:\n\n```js\njest.unstable_mockModule('../lib/demo.js', async () => {\n  const real = await jest.requireActual('../lib/demo.js');\n  return { ...real, sleep: () => Promise.resolve() }; // no delay\n});\n```\n\nEither way, call `runDemo()` **once** in a `beforeAll` and reuse captured output instead of re-running in every test.\n\n<details>\n<summary>üß∞ Tools</summary>\n\n<details>\n<summary>ü™õ GitHub Actions: Test and Validate</summary>\n\n[error] 65-65: Jest test timeout exceeded (5000 ms) in 'should run demo without errors'. Consider increasing timeout for long-running tests.\n\n---\n\n[error] 69-69: Jest test timeout exceeded (5000 ms) in 'should display welcome message'. Consider increasing timeout for long-running tests.\n\n---\n\n[error] 77-77: Jest test timeout exceeded (5000 ms) in 'should show PR information'. Consider increasing timeout for long-running tests.\n\n---\n\n[error] 86-86: Jest test timeout exceeded (5000 ms) in 'should display all bot comments'. Consider increasing timeout for long-running tests.\n\n---\n\n[error] 97-97: Jest test timeout exceeded (5000 ms) in 'should show decision outcomes'. Consider increasing timeout for long-running tests.\n\n---\n\n[error] 107-107: Jest test timeout exceeded (5000 ms) in 'should display summary statistics'. Consider increasing timeout for long-running tests.\n\n---\n\n[error] 117-117: Jest test timeout exceeded (5000 ms) in 'should show call to action'. Consider increasing timeout for long-running tests.\n\n</details>\n\n</details>\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn test/demo.test.js around lines 64 to 126, the tests time out because\nrunDemo() includes a 7-second sleep and is called repeatedly in each test,\nexceeding Jest's default 5-second timeout. To fix this, mock the sleep function\nin the demo module during tests to immediately resolve without delay, and\nrefactor the tests to call runDemo() only once in a beforeAll hook, capturing\nthe output for reuse in all tests instead of rerunning it multiple times.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "path": "test/demo.test.js",
      "line": null,
      "created_at": "2025-06-17T21:57:26Z",
      "analysis": {
        "action": "AUTO_FIX",
        "severity": "HIGH",
        "reason": "Security issue that should be fixed",
        "suggestedFix": "// TODO: Implement fix based on specific issue",
        "source": "rules"
      },
      "thread": "2153238110"
    },
    {
      "id": 2153238113,
      "author": "coderabbitai[bot]",
      "body": "_üõ†Ô∏è Refactor suggestion_\n\n**Add an opt-out flag to disable artificial delays (improves testability & UX)**\n\nLong `sleep()` calls are great for show-case but hurt automated tests and slow power-users. Consider:\n\n```diff\n-export async function runDemo() {\n+export async function runDemo({ fast = false } = {}) {\n...\n-  await sleep(1000);\n+  if (!fast) await sleep(1000);\n...\n-  await sleep(1500);\n+  if (!fast) await sleep(1500);\n```\n\nIn tests you‚Äôd call `runDemo({ fast: true })` and avoid all Jest timeouts without stubbing.\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nexport async function runDemo({ fast = false } = {}) {\n  console.log('\\nüéµ ' + chalk.magenta('Welcome to pr-vibe!') + ' Let\\'s see how it handles bot comments.\\n');\n  \n  // Simulate fetching PR\n  const fetchSpinner = ora('Fetching PR #42 from awesome-app/backend...').start();\n  if (!fast) await sleep(1000);\n  fetchSpinner.succeed('Found PR with 5 bot comments');\n  \n  // ‚Ä¶later in the demo‚Ä¶\n  if (!fast) await sleep(1500);\n\n  // ‚Ä¶rest of the function‚Ä¶\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn lib/demo.js around lines 6 to 13, the runDemo function uses fixed sleep\ndelays that slow down tests and user experience. Modify runDemo to accept an\noptions parameter with a 'fast' flag; when true, skip or reduce the sleep\ndelays. Update all sleep calls inside runDemo to conditionally await based on\nthis flag, allowing faster execution during tests or for power users.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "path": "lib/demo.js",
      "line": 13,
      "created_at": "2025-06-17T21:57:26Z",
      "analysis": {
        "action": "AUTO_FIX",
        "severity": "HIGH",
        "reason": "Security issue that should be fixed",
        "suggestedFix": "// TODO: Implement fix based on specific issue",
        "source": "rules"
      },
      "thread": "2153238113"
    },
    {
      "id": 2153238119,
      "author": "coderabbitai[bot]",
      "body": "_‚ö†Ô∏è Potential issue_\n\n**Wrap `case` bodies in blocks to satisfy `no-case-declarations` & indentation rules**\n\nJS engines hoist `const`/`let` per-switch, ESLint rightfully flags this.  Minimal fix:\n\n```diff\n-    switch (action) {\n-      case 'status':\n-        showAuthStatus();\n-        break;\n-      case 'setup':\n-      case 'login':\n-        console.log(chalk.yellow('\\nüöß Interactive auth setup coming soon!\\n'));\n-        console.log('For now, please use one of these methods:\\n');\n-        const { showAuthHelp } = await import('../lib/auth.js');\n-        showAuthHelp();\n-        break;\n-      default:\n-        console.log(chalk.red(`Unknown auth action: ${action}`));\n-        console.log('Available actions: status, setup, login');\n-    }\n+    switch (action) {\n+      case 'status': {\n+        showAuthStatus();\n+        break;\n+      }\n+      case 'setup':\n+      case 'login': {\n+        console.log(chalk.yellow('\\nüöß Interactive auth setup coming soon!\\n'));\n+        console.log('For now, please use one of these methods:\\n');\n+        const { showAuthHelp } = await import('../lib/auth.js');\n+        showAuthHelp();\n+        break;\n+      }\n+      default: {\n+        console.log(chalk.red(`Unknown auth action: ${action}`));\n+        console.log('Available actions: status, setup, login');\n+      }\n+    }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nprogram\n  .command('auth')\n  .description('Manage GitHub authentication')\n  .argument('[action]', 'Action to perform (status, setup, login)', 'status')\n  .action(async (action) => {\n    switch (action) {\n      case 'status': {\n        showAuthStatus();\n        break;\n      }\n      case 'setup':\n      case 'login': {\n        console.log(chalk.yellow('\\nüöß Interactive auth setup coming soon!\\n'));\n        console.log('For now, please use one of these methods:\\n');\n        const { showAuthHelp } = await import('../lib/auth.js');\n        showAuthHelp();\n        break;\n      }\n      default: {\n        console.log(chalk.red(`Unknown auth action: ${action}`));\n        console.log('Available actions: status, setup, login');\n      }\n    }\n  });\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>üß∞ Tools</summary>\n\n<details>\n<summary>ü™õ Biome (1.9.4)</summary>\n\n[error] 100-101: Other switch clauses can erroneously access this declaration.\nWrap the declaration in a block to restrict its access to the switch clause.\n\nThe declaration is defined in this switch clause:\n\nUnsafe fix: Wrap the declaration in a block.\n\n\n(lint/correctness/noSwitchDeclarations)\n\n</details>\n<details>\n<summary>ü™õ ESLint</summary>\n\n[error] 93-93: Expected indentation of 4 spaces but found 6.\n\n(indent)\n\n---\n\n[error] 94-94: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 95-95: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 96-96: Expected indentation of 4 spaces but found 6.\n\n(indent)\n\n---\n\n[error] 97-97: Expected indentation of 4 spaces but found 6.\n\n(indent)\n\n---\n\n[error] 98-98: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 99-99: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 100-100: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 100-100: Unexpected lexical declaration in case block.\n\n(no-case-declarations)\n\n---\n\n[error] 101-101: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 102-102: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 103-103: Expected indentation of 4 spaces but found 6.\n\n(indent)\n\n---\n\n[error] 104-104: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n---\n\n[error] 105-105: Expected indentation of 6 spaces but found 8.\n\n(indent)\n\n</details>\n<details>\n<summary>ü™õ GitHub Check: test (18.x)</summary>\n\n[failure] 100-100: \nUnexpected lexical declaration in case block                        \n\n---\n\n[failure] 100-100: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 99-99: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 98-98: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 97-97: \nExpected indentation of 4 spaces but found 6                        \n\n---\n\n[failure] 96-96: \nExpected indentation of 4 spaces but found 6                        \n\n---\n\n[failure] 95-95: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 94-94: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 93-93: \nExpected indentation of 4 spaces but found 6                        \n\n</details>\n<details>\n<summary>ü™õ GitHub Check: test (20.x)</summary>\n\n[failure] 100-100: \nUnexpected lexical declaration in case block                        \n\n---\n\n[failure] 100-100: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 99-99: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 98-98: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 97-97: \nExpected indentation of 4 spaces but found 6                        \n\n---\n\n[failure] 96-96: \nExpected indentation of 4 spaces but found 6                        \n\n---\n\n[failure] 95-95: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 94-94: \nExpected indentation of 6 spaces but found 8                        \n\n---\n\n[failure] 93-93: \nExpected indentation of 4 spaces but found 6                        \n\n</details>\n\n</details>\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn bin/cli-new.js around lines 87 to 107, the switch statement cases declare\nvariables without block scoping, causing ESLint no-case-declarations errors. To\nfix this, wrap the code inside each case that declares variables in curly braces\n{} to create a block scope, ensuring proper variable scoping and satisfying\nindentation rules.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "path": "bin/cli-new.js",
      "line": 107,
      "created_at": "2025-06-17T21:57:26Z",
      "analysis": {
        "action": "AUTO_FIX",
        "severity": "HIGH",
        "reason": "Security issue that should be fixed",
        "suggestedFix": "// TODO: Implement fix based on specific issue",
        "source": "rules"
      },
      "thread": "2153238119"
    },
    {
      "id": 2153302564,
      "author": "coderabbitai[bot]",
      "body": "_‚ö†Ô∏è Potential issue_\n\n**Add Git Config to Auth Detection**  \nThe list of token sources omits Git config detection, which is supported in the code. Please include Git config alongside the other sources for accuracy.  \n  \nApply this diff:\n\n```diff\n   pr-vibe automatically detects tokens from:\n-  - ‚úÖ GitHub CLI (`gh auth login`)\n-  - ‚úÖ Environment variables\n-  - ‚úÖ VS Code GitHub extension\n+  - ‚úÖ GitHub CLI (`gh auth login`)\n+  - ‚úÖ Environment variables (GITHUB_TOKEN, GH_TOKEN)\n+  - ‚úÖ VS Code GitHub extension\n+  - ‚úÖ Git config (credential helper)\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n   pr-vibe automatically detects tokens from:\n   - ‚úÖ GitHub CLI (`gh auth login`)\n   - ‚úÖ Environment variables (GITHUB_TOKEN, GH_TOKEN)\n   - ‚úÖ VS Code GitHub extension\n   - ‚úÖ Git config (credential helper)\n\n   No token? Run `pr-vibe auth` for guided setup.\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn README.md around lines 78 to 83, the documentation for token detection\nsources is missing Git config as a supported source. Update the list to include\nGit config detection alongside GitHub CLI, environment variables, and VS Code\nGitHub extension to accurately reflect the code's capabilities.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "path": "README.md",
      "line": 83,
      "created_at": "2025-06-17T22:59:39Z",
      "analysis": {
        "action": "AUTO_FIX",
        "severity": "HIGH",
        "reason": "Security issue that should be fixed",
        "suggestedFix": "// TODO: Implement fix based on specific issue",
        "source": "rules"
      },
      "thread": "2153302564"
    },
    {
      "id": 2153302573,
      "author": "coderabbitai[bot]",
      "body": "_‚ö†Ô∏è Potential issue_\n\n**Unify Auth Command Usage**  \nThe Getting Started section shows `pr-vibe auth status`, but the Commands section lists `pr-vibe auth`. Confirm the correct command and make both consistent‚Äîe.g.:\n\n```diff\n- # Check your auth status\n- pr-vibe auth\n+ # Check your auth status\n+ pr-vibe auth status\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n## Commands\n\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn README.md between lines 92 and 112, the commands section lists `pr-vibe auth`\nwhile the Getting Started section uses `pr-vibe auth status`. Verify the correct\ncommand syntax for checking auth status and update both sections to use the same\nconsistent command, either `pr-vibe auth` or `pr-vibe auth status`, to avoid\nconfusion.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "path": "README.md",
      "line": 112,
      "created_at": "2025-06-17T22:59:39Z",
      "analysis": {
        "action": "AUTO_FIX",
        "severity": "HIGH",
        "reason": "Security issue that should be fixed",
        "suggestedFix": "// TODO: Implement fix based on specific issue",
        "source": "rules"
      },
      "thread": "2153302573"
    }
  ],
  "stats": {
    "total": 8,
    "byAuthor": {
      "coderabbitai[bot]": 8
    },
    "byAction": {
      "REJECT": 1,
      "undefined": 1,
      "AUTO_FIX": 6
    }
  },
  "metadata": {
    "exported_at": "2025-06-17T23:27:10.587Z",
    "tool_version": "0.0.1",
    "repo": "stroupaloop/pr-vibe"
  }
}