import chalk from 'chalk';
import { patternManager } from '../../lib/pattern-manager.js';
import { writeFileSync } from 'fs';
import { join } from 'path';

export function addPatternCommands(program) {
  const patterns = program
    .command('patterns')
    .description('Manage bot response patterns');

  // Show patterns
  patterns
    .command('show')
    .description('Show current patterns')
    .option('--global', 'Show global learned patterns')
    .option('--repo', 'Show repository patterns')
    .option('--stats', 'Show pattern statistics')
    .action((options) => {
      if (options.stats) {
        showStats();
      } else if (options.global) {
        showGlobalPatterns();
      } else {
        showRepoPatterns();
      }
    });

  // Learn from PRs
  patterns
    .command('learn')
    .description('Learn patterns from past PRs')
    .option('-r, --repo <repo>', 'Repository to learn from')
    .option('--last <number>', 'Number of PRs to analyze', '50')
    .action(async (options) => {
      console.log(chalk.blue('🧠 Learning from past PRs...\n'));
      // Implementation would analyze past PRs
      console.log(chalk.yellow('This feature is coming soon!'));
    });

  // Export patterns
  patterns
    .command('export')
    .description('Export patterns for sharing')
    .option('-o, --output <file>', 'Output file', 'patterns-export.yml')
    .action((options) => {
      const stats = patternManager.getStats();
      const exportData = {
        exported_at: new Date().toISOString(),
        stats: stats,
        repo_patterns: patternManager.patterns.repo,
        high_confidence_global: getHighConfidencePatterns()
      };
      
      writeFileSync(options.output, JSON.stringify(exportData, null, 2));
      console.log(chalk.green(`✅ Exported patterns to ${options.output}`));
    });

  // Init patterns file
  patterns
    .command('init')
    .description('Initialize patterns file for this repository')
    .action(() => {
      initializeRepoPatterns();
    });
}

function showStats() {
  const stats = patternManager.getStats();
  
  console.log(chalk.bold('📊 Pattern Statistics\n'));
  console.log(`Repository patterns: ${stats.repo_patterns}`);
  console.log(`Global patterns: ${stats.global_patterns}`);
  console.log(`Total decisions: ${stats.total_decisions}`);
  
  console.log(chalk.bold('\n🎯 Confidence Distribution'));
  console.log(`High (>90%): ${stats.confidence_distribution.high}`);
  console.log(`Medium (70-90%): ${stats.confidence_distribution.medium}`);
  console.log(`Low (<70%): ${stats.confidence_distribution.low}`);
}

function showGlobalPatterns() {
  const patterns = patternManager.patterns.global.learned_patterns || {};
  
  console.log(chalk.bold('🌍 Global Learned Patterns\n'));
  
  Object.values(patterns)
    .sort((a, b) => b.confidence - a.confidence)
    .slice(0, 10)
    .forEach(pattern => {
      console.log(chalk.cyan(`${pattern.id}`) + ` (confidence: ${(pattern.confidence * 100).toFixed(0)}%)`);
      console.log(`  Description: ${pattern.description}`);
      console.log(`  Occurrences: ${pattern.occurrences}`);
      console.log(`  Auto-decision: ${pattern.auto_decision}`);
      console.log(`  Seen in: ${pattern.repos_seen?.slice(0, 3).join(', ')}${pattern.repos_seen?.length > 3 ? '...' : ''}`);
      console.log();
    });
}

function showRepoPatterns() {
  if (!patternManager.patterns.repo) {
    console.log(chalk.yellow('No repository patterns found.'));
    console.log(chalk.gray('Run `pr-bot patterns init` to create a patterns file.'));
    return;
  }
  
  const repo = patternManager.patterns.repo;
  
  console.log(chalk.bold(`📁 Repository Patterns: ${repo.project}\n`));
  
  if (repo.valid_patterns) {
    console.log(chalk.cyan('Valid Patterns:'));
    repo.valid_patterns.forEach(pattern => {
      console.log(`  • ${pattern.id}: ${pattern.reason}`);
    });
  }
  
  if (repo.auto_fixes) {
    console.log(chalk.cyan('\nAuto-fix Rules:'));
    repo.auto_fixes.forEach(fix => {
      console.log(`  • ${fix.id}: ${fix.trigger}`);
    });
  }
  
  if (repo.stats) {
    console.log(chalk.cyan('\nRepository Stats:'));
    console.log(`  Total PR comments: ${repo.stats.total_pr_comments}`);
    console.log(`  Auto-handled: ${repo.stats.auto_handled}`);
    console.log(`  Time saved: ${repo.stats.time_saved_hours} hours`);
  }
}

function getHighConfidencePatterns() {
  const patterns = patternManager.patterns.global.learned_patterns || {};
  return Object.values(patterns)
    .filter(p => p.confidence > 0.9)
    .sort((a, b) => b.occurrences - a.occurrences)
    .slice(0, 20);
}

function initializeRepoPatterns() {
  const template = `# PR Bot Response Patterns
# Generated by pr-bot-responder

version: 1.0
project: ${process.cwd().split('/').pop()}
description: "Project-specific patterns for bot responses"
created_at: ${new Date().toISOString()}
created_by: pr-bot-responder

# Valid patterns that should be rejected with explanation
valid_patterns:
  # Example: Console.log in serverless functions
  # - id: console-log-lambda
  #   pattern: "console.log"
  #   condition:
  #     files: ["**/lambda/**", "**/*-handler.js"]
  #   reason: "We use console.log for CloudWatch logging"
  #   confidence: 1.0
  #   auto_reply: |
  #     Thanks for the feedback. We use console.log for CloudWatch logging
  #     in our Lambda functions. This is our standard logging approach.

# Auto-fix rules for common issues  
auto_fixes:
  # Example: Move hardcoded secrets to env vars
  # - id: api-key-to-env
  #   trigger: "hardcoded.+(api|key|token)"
  #   severity: CRITICAL
  #   fix_template: |
  #     const {{CONST_NAME}} = process.env.{{ENV_NAME}};
  #     if (!{{CONST_NAME}}) {
  #       throw new Error('Missing: {{ENV_NAME}}');
  #     }

# When to escalate to humans
escalation_rules:
  - id: architecture-decisions
    pattern: "refactor|architecture|redesign"
    notify: ["@your-username"]
    message: "Architecture decision needed"

# Stats will be auto-populated
stats:
  total_pr_comments: 0
  auto_handled: 0
  time_saved_hours: 0
`;

  const dir = join(process.cwd(), '.pr-bot');
  mkdirSync(dir, { recursive: true });
  writeFileSync(join(dir, 'patterns.yml'), template);
  
  console.log(chalk.green('✅ Created .pr-bot/patterns.yml'));
  console.log(chalk.gray('Edit this file to add your project-specific patterns.'));
}